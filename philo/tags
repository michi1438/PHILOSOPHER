!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/michael/PHILOSOPHER/philo/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/a130f268/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(NAME)	Makefile	/^$(NAME): $(OBJS)$/;"	t
AR	Makefile	/^AR = ar rcs$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Werror -Wall -Wextra -g3$/;"	m
DIE	head_philo.h	/^	DIE,$/;"	e	enum:e_logs
EAT	head_philo.h	/^	EAT,$/;"	e	enum:e_logs
FORK	head_philo.h	/^	FORK,$/;"	e	enum:e_logs
HEAD_PHILO_H	head_philo.h	/^# define HEAD_PHILO_H$/;"	d
NAME	Makefile	/^NAME = philo$/;"	m
OBJS	Makefile	/^OBJS = $(SOURCES:c=o)$/;"	m
SLEEP	head_philo.h	/^	SLEEP,$/;"	e	enum:e_logs
SOURCES	Makefile	/^SOURCES = $(addprefix src\/, $(SRC))$/;"	m
SRC	Makefile	/^SRC = philo_main.c philo_init.c philo_atoi.c philo_invok.c philo_utils.c$/;"	m
THINK	head_philo.h	/^	THINK,$/;"	e	enum:e_logs
all	Makefile	/^all: $(NAME)$/;"	t
clean	Makefile	/^clean:$/;"	t
compend	head_philo.h	/^	t_comp		compend;$/;"	m	struct:s_philos	typeref:typename:t_comp
create_philos	src/philo_invok.c	/^void	create_philos(t_philos *philos)$/;"	f	typeref:typename:void
e_logs	head_philo.h	/^enum e_logs$/;"	g
fclean	Makefile	/^fclean: clean$/;"	t
forks	head_philo.h	/^	int		*forks;$/;"	m	struct:s_comp	typeref:typename:int *
ft_atoi	src/philo_atoi.c	/^int	ft_atoi(const char *num)$/;"	f	typeref:typename:int
has_2_forks	src/philo_utils.c	/^int	has_2_forks(t_comp comp, int stbl_name)$/;"	f	typeref:typename:int
hello	src/philo_invok.c	/^void	*hello(t_philos *philos)$/;"	f	typeref:typename:void *
init_args	src/philo_init.c	/^int	init_args(int ac, char **av, t_comp *compend)$/;"	f	typeref:typename:int
init_forks	src/philo_init.c	/^void	init_forks(t_comp *compend)$/;"	f	typeref:typename:void
init_philos	src/philo_invok.c	/^void	init_philos(t_philos *philos, int i)$/;"	f	typeref:typename:void
is_eating	src/philo_invok.c	/^void	is_eating(t_comp comp, int stbl_name)$/;"	f	typeref:typename:void
is_unsigned_int	src/philo_init.c	/^int	is_unsigned_int(char **av, int ac)$/;"	f	typeref:typename:int
main	src/philo_main.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
n_cycles	head_philo.h	/^	int		n_cycles;$/;"	m	struct:s_comp	typeref:typename:int
n_philo	head_philo.h	/^	int		n_philo;$/;"	m	struct:s_comp	typeref:typename:int
name	head_philo.h	/^	int			name;$/;"	m	struct:s_philos	typeref:typename:int
num_len	src/philo_atoi.c	/^int	num_len(char const *num)$/;"	f	typeref:typename:int
print_compend	src/philo_main.c	/^void	print_compend(t_comp *compend)$/;"	f	typeref:typename:void
printlog	src/philo_utils.c	/^void	printlog(int log_type, int name)$/;"	f	typeref:typename:void
re	Makefile	/^re: fclean all$/;"	t
s_comp	head_philo.h	/^typedef struct s_comp$/;"	s
s_philos	head_philo.h	/^typedef struct s_philos$/;"	s
t_comp	head_philo.h	/^}	t_comp;$/;"	t	typeref:struct:s_comp
t_death	head_philo.h	/^	int		t_death;$/;"	m	struct:s_comp	typeref:typename:int
t_eat	head_philo.h	/^	int		t_eat;$/;"	m	struct:s_comp	typeref:typename:int
t_philos	head_philo.h	/^}	t_philos;$/;"	t	typeref:struct:s_philos
t_sleep	head_philo.h	/^	int		t_sleep;$/;"	m	struct:s_comp	typeref:typename:int
thread	head_philo.h	/^	pthread_t	*thread;$/;"	m	struct:s_philos	typeref:typename:pthread_t *
